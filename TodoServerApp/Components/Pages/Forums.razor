@page "/"
@inject NavigationManager navigate
@rendermode InteractiveServer
@inject IDataService data

<PageTitle>Форум</PageTitle>

<h1>Форум вопросов и ответов</h1>

Хотите задать вопрос?

<div class="container">
    @if ( forums == null)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <div class="btn-group m-2">
            <button class="btn btn-primary" @onclick="AddForum">Задать вопрос</button>
        </div>

        <div class="card-group">
            @foreach (var forum in forums) //перебирает коллекцию forums и создает карточку для каждого вопроса
            {
                <div class="card">
                    <div class="card-header">
                        @forum.Question
                    </div>
                    <div class="card-body">
                        <p>Ответ: @forum.Answer</p>
                        <p>Тема: @forum.Name</p>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-primary" href="forums/@forum.Id">Редактировать</a>
                        <button class="btn btn-primary" @onclick="async() => await DeleteForum(forum.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code{
    IEnumerable<ForumItem>? forums; //поле со списком

    protected override async Task OnInitializedAsync() //метод, вызываемый при инициализации компонента
    {
        await base.OnInitializedAsync();
        forums = await data.GetForumItemsAsync(); //асинхронно загружает список сотрудников с использованием data.GetAllAsync() и сохраняет его в employees
    }

    void AddForum()
    {
        navigate.NavigateTo("forums/add");
    }

    async Task DeleteForum(int id)
    {
        await data.DeleteAsync(id);
        forums = await data.GetForumItemsAsync();
    }
}